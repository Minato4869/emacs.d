(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(custom-set-faces
 '(dired-directory ((t (:foreground "brightblue"))))
 '(dired-symlink ((t (:foreground "magenta"))))
 '(font-lock-builtin-face ((t (:foreground "magenta"))))
 '(font-lock-comment-face ((t (:foreground "red"))))
 '(font-lock-constant-face ((t (:foreground "green"))))
 '(font-lock-function-name-face ((t (:foreground "magenta"))))
 '(font-lock-keyword-face ((t (:foreground "cyan"))))
 '(font-lock-string-face ((t (:foreground "green"))))
 '(font-lock-type-face ((t (:foreground "green"))))
 '(font-lock-variable-name-face ((t (:foreground "yellow"))))
 '(font-lock-warning-face ((t (:foreground "Red" :bold t))))
 '(mode-line-inactive ((t (:inverse-video nil))))
 '(minibuffer-prompt ((t (:inherit foreground :bold t))))
 '(region ((t (:foreground "white" :background "blue" :extend t))))
 '(sh-quoted-exec ((t (:foreground "salmon"))))
 '(sh-heredoc ((t (:foreground "yellow" :bold t))))
 '(cua-rectangle ((t (:foreground "white" :background "maroon" :extend t))))
 '(Man-overstrike ((t (:foreground "brightred" :bold t))))
 '(Man-underline ((t (:foreground "brightgreen" :underline nil :bold t)))))

(when (or (window-system) (daemonp))
  (put 'suspend-frame 'disabled t)

  (custom-set-faces
   '(default ((t (:foreground "grey" :background "#black"))))
   '(cursor ((t (:foreground "red"))))
   '(region ((t (:background "#114488" :foreground "grey" :extend t)))))
  (global-unset-key (kbd "C-x C-z"))
  (global-unset-key (kbd "C-x -z"))
  (global-set-key (kbd "C-x C-o") 'other-frame))
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-h") 'backward-delete-char)
(global-set-key (kbd "C-c 5") 'query-replace)
(defconst custom-region-alist
  `((mark-active
     ,@(let ((m (make-sparse-keymap)))
   (define-key m (kbd "C-w") 'kill-region)
   (define-key m (kbd "M-U") 'upcase-region)
   (define-key m (kbd "M-L") 'downcase-region)
   m))))
(add-to-list 'emulation-mode-map-alists 'custom-region-alist)
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "M-W") 'backward-kill-sexp)
(defun backward-kill-line (arg)
  "Kill ARG lines backward."
  (interactive "p")
  (if (eq (point) (line-beginning-position))
      (delete-indentation)
    (kill-line (- 1 arg))))
(global-set-key (kbd "C-u") 'backward-kill-line)
(global-set-key (kbd "M-u") 'universal-argument)
(global-set-key (kbd "M-o") 'other-window)
(global-set-key (kbd "M-g") 'goto-line)
(ido-mode t)
(setq vc-follow-symlinks t)
(custom-set-variables
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(scroll-error-top-bottom t) ;; move cursor to end/beginning
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(use-dialog-box nil)
 '(blink-cursor-mode nil)
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(scroll-bar-mode nil)
 '(tool-bar-mode nil))
(let ((backupdir "~/.emacs.d/backup/"))
  (mkdir backupdir t)
  (setq backup-directory-alist `(("." . ,backupdir))))
(let ((autosavedir "~/.emacs.d/autosave/"))
  (mkdir autosavedir t)
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosave/" t))))
