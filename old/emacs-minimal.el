(custom-set-variables
 '(blink-cursor-mode nil)
 '(line-number-mode t)
 '(column-number-mode t)
 '(inhibit-startup-screen t)
 '(menu-bar-mode nil)
 '(scroll-bar-mode (quote nil))
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil)
 '(tooltip-mode nil)
 '(use-dialog-box nil))
(custom-set-faces
 '(default ((t (:background "black" :foreground "#bebebe"))))
 '(cursor ((t (:background "#ff0000"))))
 '(border ((t (:foreground "blue"))))
 '(fringe ((t (:background "#121212"))))
 '(mode-line ((t (:inherit foreground :background "#292929" ))))
 '(region ((t (:foreground "#e0e0e0" :background "#114488"))))

 '(font-lock-builtin-face ((t (:foreground "#75507b"))))
 '(font-lock-comment-face ((t (:foreground "#cc0000"))))
 '(font-lock-constant-face ((t (:foreground "#4e9a06"))))
 '(font-lock-function-name-face ((t (:foreground "#75507b"))))
 '(font-lock-keyword-face ((t (:foreground "#729fcf"))))
 '(font-lock-string-face ((t (:foreground "#4e9a06"))))
 '(font-lock-type-face ((t (:foreground "#4e9a06"))))
 '(font-lock-variable-name-face ((t (:foreground "#c4a000"))))
 '(font-lock-warning-face ((t (:foreground "Red" :bold t))))

 '(ido-subdir ((t (:foreground "#a1c659"))))
 '(ido-only-match ((t (:foreground "#ffcc33"))))
 ;; shared faces
 '(dired-directory ((t (:foreground "#4286f4"))))
 '(dired-symlink ((t (:foreground "#75507B"))))
 '(hl-line ((t (:extend t))))
 '(menu ((t (:foreground "#e5e5e5" :background "#333333"))))
 '(region ((t (:extend t))))
 '(trailing-whitespace ((t (:background "#ffb6b0"))))
 '(variable-pitch ((t (:font "Sans-Serif-14"))))

 '(mouse ((t (:background "black" :foreground "white" ))))
 '(line-number ((t (:inherit foreground :bold t))))
 '(minibuffer-prompt ((t (:inherit foreground :bold t))))

 '(ido-indicator ((t (:inherit foreground))))
 '(ido-first-match ((t (:inherit foreground :bold t :underline t))))
 '(ido-incomplete-regexp ((t (:inherit foreground))))

 '(diff-added ((t (:foreground "green"))))
 '(diff-removed ((t (:foreground "red"))))
 '(diff-header ((t (nil))))
 )

;; (require 'package)
;; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
;; (package-initialize)

(setq exec-path (append '("~/.bin" "~/bin") exec-path))
(setq frame-title-format '("" "emacs@" system-name " - %b"))
(setq visible-bell nil)
(setq vc-follow-symlinks t)

(when (or (window-system) (daemonp))
	(put 'suspend-frame 'disabled t)
	(global-unset-key (kbd "C-x C-z"))
	(global-set-key (kbd "C-x C-o") 'other-frame))
;;; custom functions
(defun run-term (&optional arg)
	(interactive "P")
	(let ((default-directory default-directory))
		(start-process "xterm" nil "xterm")))

(defun backward-kill-line (arg)
	"Kill ARG lines backward."
	(interactive "p")
	(if (eq (point) (line-beginning-position))
			(delete-indentation)
		(kill-line (- 1 arg))))

;;; ido
(ido-mode t)
(setq ido-enable-flex-matching t)
(ido-everywhere t)
(setq ido-auto-merge-work-directories-length -1)
(setq ido-default-buffer-method 'selected-window)
(setq ido-default-file-method 'selected-window)
;;; keybinds
(global-set-key (kbd "C-x SPC") 'cua-rectangle-mark-mode)
(global-set-key (kbd "C-h") 'backward-delete-char)
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "<s-return>") 'run-term)
(global-set-key (kbd "C-c t") 'run-term)
(defconst custom-region-alist
	`((mark-active
	   ,@(let ((m (make-sparse-keymap)))
				 (define-key m (kbd "C-w") 'kill-region)
				 (define-key m (kbd "M-L") 'downcase-region)
			 m))))
(add-to-list 'emulation-mode-map-alists 'custom-region-alist)
(global-set-key (kbd "C-w") 'backward-kill-word)
(global-set-key (kbd "C-u") 'backward-kill-line)
(global-set-key (kbd "M-u") 'universal-argument)
;;; editing
(delete-selection-mode t)
(setq-default auto-fill-function 'do-auto-fill)
(setq-default fill-column 80)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq-default indent-tabs-mode t)
(setq-default tab-width 8)
(defvaralias 'c-basic-offset 'tab-width)
(setq c-default-style "linux")
(setq backward-delete-char-untabify-method 'hungry)
(setq mouse-autoselect-window t)
(setq visible-cursor nil)
(fset 'yes-or-no-p 'y-or-n-p)
